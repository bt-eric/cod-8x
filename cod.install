<?php

use Drupal\user\Entity\User;

/**
 * Implements hook_requirements().
 */
function cod_requirements($phase) {
  $requirements = array();
  // Ensure translations don't break during installation.
  $t = get_t();
  if($phase == 'install') {

    // Test PHP minimum execution time
    $requirements['php_max_execution_time'] = array(
      'title' => $t('PHP Max Execution Time'),
      'value' => ini_get('max_execution_time'),
    );
    $max_execution_time = (int)ini_get('max_execution_time');
    // Don't set the error when max_execution_time is 0 (Infinite).
    if ($max_execution_time && $max_execution_time < DRUPAL_MINIMUM_MAX_EXECUTION_TIME) {
      $requirements['php_max_execution_time']['description'] = $t('Your PHP execution time is too low, please set it greater than or equal to %time seconds.', array('%time' => DRUPAL_MINIMUM_MAX_EXECUTION_TIME));
      $requirements['php_max_execution_time']['severity'] = REQUIREMENT_ERROR;
    }

    // Check for APC / OPcache memory size.
    if (($opcache_mem = ini_get('opcache.memory_consumption')) != NULL || ($apc_mem = ini_get('apc.shm_size')) != NULL) {
      // Check for OPcache first, as APCu could be in use in addition to
      // OPcache, in which case apc.shm_size can be ignored.
      $ext_name = '';
      $ini_name = '';
      $ini_suffix = '';
      if (!empty($opcache_mem)) {
        $requirements['opcode_cache_size'] = array(
          'title' => $t('OPcache memory'),
          'value' => $opcache_mem,
        );
        $ext_name = 'OPcache';
        $ini_name = 'opcache.memory_consumption';
        $ini_suffix = '';
      }
      elseif (!empty($apc_mem)) {
        $requirements['opcode_cache_size'] = array(
          'title' => $t('APC shim size'),
          'value' => $apc_mem,
        );
        $ext_name = 'APC';
        $ini_name = 'apc.shm_size';
        $ini_suffix = 'M';
      }

      $mem_size = intval(ini_get($ini_name));

      if ($mem_size && $mem_size < COD_MINIMUM_OPCODE_CACHE) {
        $requirements['opcode_cache_size']['description'] = $t('%ext_name is installed but %mem_size is not enough opcode cache to successfully install COD.
          Find your php configuration file(s) and change the <em>%ini_name</em> value to at least <em>%min_mem_size</em>.',
          array(
            '%ext_name' => $ext_name,
            '%mem_size' => $mem_size . 'M',
            '%ini_name' => $ini_name,
            '%min_mem_size' => COD_MINIMUM_OPCODE_CACHE . $ini_suffix,
          ));
        $requirements['opcode_cache_size']['severity'] = REQUIREMENT_ERROR;
      }
    }
  }
  return $requirements;
}

/**
 * Implements hook_install_tasks().
 */
function cod_install_tasks() {
  //make sure we have more memory than 196M. if not lets try to increase it.
  if (ini_get('memory_limit') != '-1' && ini_get('memory_limit') <= '196M' && ini_get('memory_limit') >= '128M') {
    ini_set('memory_limit', '196M');
  }

  $selected_extras = \Drupal::config('cod.selected_extras')->getRawData();

  return array(
    //'cod_acquia_connector_enable' => array(
    //  'display' => FALSE,
    //  'type' => '',
    //  'run' => $acquia_connector ? INSTALL_TASK_RUN_IF_NOT_COMPLETED : INSTALL_TASK_SKIP,
    //),
    //'cod_demo_content' => array(
    //  'display' => FALSE,
    //  'type' => '',
    //  'run'
//    'cod_create_first_event' => array(
//      'display_name' => t('Create the first conference'),
//      'display' => TRUE,
//      'type' => 'form',
//    ),
//    'cod_install_additional_modules' => array(
//      'display_name' => !empty($selected_extras['example_content']) ? t('Install example content') : t('Install additional functionality'),
//      'display' => FALSE,
//      'type' => 'batch',
//    ),
//    'cod_admin_permissions' => array(
//      'display' => FALSE,
//    ),
  );
}

/**
 * Implements hook_install_tasks_alter().
 */
function cod_install_tasks_alter(&$tasks, $install_state) {
  global $install_state;
  $tasks['install_profile_modules']['display_name'] = t('Install Conference Organizing Distribution');

  // Skip profile selection step.
  $tasks['install_select_profile']['display'] = FALSE;

  // Skip language selection install step and default language to English.
  $tasks['install_select_locale']['display'] = FALSE;
  $tasks['install_select_locale']['run'] = INSTALL_TASK_SKIP;
  $install_state['parameters']['locale'] = 'en';

  // Override "install_finished" task to redirect people to home page.
//  $tasks['install_finished']['function'] = 'cod_install_finished';
}

/**
 * Override of install_finished() without the useless text.
 */
function cod_install_finished(&$install_state) {

  // Remember the profile which was used.
  variable_set('install_profile', drupal_get_profile());
  variable_set('install_task', 'done');

  // BEGIN copy/paste from install_finished().
  // Remove the bookmarks flag
//  $flag = flag_get_flag('bookmarks');
//  if($flag) {
//    $flag->delete();
//    $flag->disable();
//    _flag_clear_cache();
//  }

  // Flush all caches to ensure that any full bootstraps during the installer
  // do not leave stale cached data, and that any content types or other items
  // registered by the installation profile are registered correctly.
  drupal_flush_all_caches();

  // Enable the Origins theme and set it as the default.
  $cod_themes = array('omega', 'pisces', 'adminimal', 'fisherman');
  theme_enable($cod_themes);

  // Set the default and administration themes.
  variable_set('theme_default', 'pisces');
  // Set a default administrative theme:
  variable_set('admin_theme', 'fisherman');

  // We make custom code for the footer here because we want people to be able to freely edit it if they wish.
  $footer_body = '<p>'. t('A community events site, powered by the <a href="@drupal">Conference Organizing Distribution</a>', array('@drupal' => url('https://drupal.org/project/cod'))) . '</p>';

  $footer_block_text = array(
    'body' => t($footer_body),
    'info' => t('Default Footer'),
    'format' => 'full_html',
  );

  if (drupal_write_record('block_custom', $footer_block_text)) {
    $footer_block = array(
      'module' => 'block',
      'delta' => $footer_block_text['bid'],
      'theme' => 'pisces',
      'visibility' => 0,
      'region' => 'footer',
      'status' => 1,
      'pages' => 0,
      'weight' => 1,
      'title' => variable_get('site_name', 'Conference Organizing Distribution'),
    );
    drupal_write_record('block', $footer_block);
  }

  // Installation profiles are always loaded last
  db_update('system')
    ->fields(array('weight' => 1000))
    ->condition('type', 'module')
    ->condition('name', drupal_get_profile())
    ->execute();

  // Cache a fully-built schema.
  drupal_get_schema(NULL, TRUE);

  //TODO: Hardcoded to the first event that is created.
  if (module_exists('cod_session')) {
    if ($first_event = node_load(1)) {
      cod_session_generate_session_tracks($first_event, 'node', TRUE);
    }
  }

  // Run cron to populate update status tables (if available) so that users
  // will be warned if they've installed an out of date Drupal version.
  // Will also trigger indexing of profile-supplied content or feeds.
  drupal_cron_run();

  // Set default permissions per https://www.drupal.org/node/2500767.
  $permissions = module_invoke_all('cod_default_permissions');
  // Set user roles
  if (isset($permissions['user_role'])) {
    foreach($permissions['user_role'] AS $module) {
      cod_install_roles($module);
    }
  }
  // Set og roles
  if (isset($permissions['og_role'])) {
    foreach($permissions['og_role'] AS $module) {
      cod_install_og_roles($module);
    }
  }
  // Set user permissions
  if (isset($permissions['user_permission'])) {
    foreach($permissions['user_permission'] AS $module) {
      cod_install_permissions($module);
    }
  }
  // Set og permissions
  if (isset($permissions['og_permission'])) {
    foreach($permissions['og_permission'] AS $module) {
      cod_install_og_permissions($module);
    }
  }

  if (isset($messages['error'])) {
    $output = '<p>' . (isset($messages['error']) ? t('Review the messages above before visiting <a href="@url">your new site</a>.', array('@url' => url(''))) : t('<a href="@url">Visit your new site</a>.', array('@url' => url('')))) . '</p>';
    return $output;
  }
  else {
    // Since any module can add a drupal_set_message, this can bug the user
    // when we redirect him to the front page. For a better user experience,
    // remove all the message that are only "notifications" message.
    drupal_get_messages('status', TRUE);
    drupal_get_messages('completed', TRUE);

    // If we don't install drupal using Drush, redirect the user to the front
    // page.
    if (!drupal_is_cli()) {
      drupal_goto('');
    }
  }
}

function cod_admin_permissions() {
  //get the administrator role, we set this in the install file
  $admin_role = user_role_load_by_name('administrator');
  user_role_grant_permissions($admin_role->rid, array_keys(module_invoke_all('permission')));
}

/**
 * Task callback: uses Batch API to enable modules based on user selection.
 *
 * Creates all demo content if requested and installs optional modules that
 * providing additional functionality to the base install.
 */
function cod_install_additional_modules() {
  $modules = variable_get('cod_selected_extras', array());

  // Resolve the dependencies now, so that module_enable() doesn't need
  // to do it later for each individual module (which kills performance).
  $files = system_rebuild_module_data();
  $modules_sorted = array();
  foreach ($modules as $module_key => $module) {
    if ($files[$module]->requires) {
      // Create a list of dependencies that haven't been installed yet.
      $dependencies = array_keys($files[$module]->requires);
      $dependencies = array_filter($dependencies, '_cod_filter_dependencies');
      // Add them to the module list.
      $modules = array_merge($modules, $dependencies);
    }
  }
  $modules = array_unique($modules);
  foreach ($modules as $module) {
    $modules_sorted[$module] = $files[$module]->sort;
  }
  arsort($modules_sorted);

  $operations = array();

  // Enable the selected modules.
  foreach ($modules_sorted as $module => $weight) {
    $operations[] = array('_cod_enable_module', array($module, $files[$module]->info['name']));
  }

  $batch = array(
    'title' => !empty($selected_extras['example_content']) ? t('Installing example content') : t('Installing additional functionality'),
    'operations' => $operations,
    'file' => drupal_get_path('profile', 'cod') . '/cod.install_callbacks.inc',
  );

  return $batch;
}

/**
 * array_filter() callback used to filter out already installed dependencies.
 */
function _cod_filter_dependencies($dependency) {
  return !module_exists($dependency);
}

/**
 * Let the admin user create the first group as part of the installation process
 */
function cod_create_first_event() {
  $form['cod_first_event_explanation'] = array(
    '#markup' => '<h2>' . t('Create your first conference.') . '</h2>' . t("COD allows you to create multiple conferences and organizes content related to a particular conference, such as sessions, attendees, and announcements."),
    '#weight' => -1,
  );

  $form['cod_first_event_title'] = array(
    '#type' => 'textfield',
    '#title' => t("Conference name"),
    '#description' => t('This is the name of your first conference. You may want to include the year or date if this is a repeating event.'),
    '#required' => TRUE,
    '#default_value' => t('DrupalCamp Antarctica'),
  );

  $form['cod_first_event_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Conference description'),
    '#description' => t("This text will appear on the conference homepage and gives a general overview. You can always change this text later."),
    '#required' => TRUE,
    '#default_value' => t('DrupalCamp Antarctica is held once a year at the South Pole, with a regular attendance of around 200 penguins'),
  );

  $form['cod_first_event_modules'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Optional Features'),
    '#description' => t("Select the optional features above that are relevant to your event."),
    '#required' => FALSE,
    '#options' => _cod_get_optional_modules(),
  );

  $form['cod_first_event_submit'] = array(
    '#type'  => 'submit',
    '#value' => t('Save and continue')
  );

  return $form;
}

/**
 * Save the first group form
 *
 * @see cod_create_first_group().
 */
function cod_create_first_event_submit($form_id, &$form_state) {
  $values = $form_state['values'];

  $enabled_features = array();
  if (isset($values['cod_first_event_modules'])) {
    foreach ($values['cod_first_event_modules'] as $module_name => $module_enabled) {
      if ($module_enabled) {
        $enabled_features[$module_name] = $module_name;
      }
    }
    variable_set('cod_selected_extras', $enabled_features);
  }

  $first_group = new stdClass();
  $first_group->type = 'event';
  node_object_prepare($first_group);

  $first_group->title = $values['cod_first_event_title'];
  $first_group->body[LANGUAGE_NONE][0]['value'] = $values['cod_first_event_body'];
  $first_group->uid = 1;
  $first_group->language = LANGUAGE_NONE;
  $first_group->status = 1;
  node_save($first_group);

  // Set the homepage to the first event.
  variable_set('site_frontpage', 'node/1');
  variable_set('cod_events_default_event', '1');
}

/**
 * Implements hook_install().
 */
function cod_install() {
  $config_factory = \Drupal::configFactory();

  // Set the default and admin theme
  $config_factory
    ->getEditable('system.theme')
    ->set('default', 'bartik')
    ->set('admin', 'seven')
    ->save(TRUE);

  // Enable the admin theme.
  $config_factory
    ->getEditable('node.settings')
    ->set('use_admin_theme', FALSE)
    ->save(TRUE);

  $config_factory
    ->getEditable('timezone.user')
    ->set('configurable', FALSE)
    ->save(TRUE);

  // Assign user 1 the "administrator" role.
  $user = User::load(1);
  $user->roles[] = 'administrator';
  $user->save();

  node_access_rebuild(FALSE);
}